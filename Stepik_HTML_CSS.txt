HTML(HyperText Markup Language) - язык разметки гипертекста

Разметка - что это вообще такое? Представь, что ты передаёшь текст по сети. Как сделать в тексте заголовок? Выделить абзац? Подчеркнуть слово? 
Самый простой вариант - пометить начало и конец выделяемого фрагмента условными метками

   Пример:	<заголовок>HTML</заголовок>
		<полужирный>HyperText Markup Language</полужирный> <курсив>(гипертекст маркап лэнгуидж)</курсив> - язык разметки гипертекста
			
Это разметка

HTML позволил создавать документы, в которых были заголовки, абзацы, ссылки, таблицы, картинки и много всего прочего

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Тег — это синтаксическая единица языка HTML, которая выделяет или создаёт элемент
      Это набор символов, с помощью которого браузер понимает, где элемент создается, начинается и заканчивается

      <h1>заголовок первого уровня (header 1)</h1>
      <p>абзац<i>курсив</i></p>

Есть 2 вида тегов: двойные и одинарные

1) Двойные теги показывает начало и конец элемента. Начало элемента обозначается открывающим тегом <…> , а конец - закрывающим </…>
   Двойной тег обязательно должен быть закрыт
   Даже несмотря на то, что современные браузеры умеют в некоторых случаях понимать разметку без закрытых тегов, лучше всегда закрывать их

2) Одинарные теги просто не имеют пары. Примеры: тег переноса строки <br> или горизонтальной линии <hr>.
   Старые браузеры требовали закрывать одинарные теги: <br />, сейчас таких браузеров практически не осталось и допустимо использовать оба варианта синтаксиса
   
Теги можно вкладывать друг в друга, но при вложении тега нужно всегда помнить о том, что внутренний тег нужно закрывать раньше внешнего  

	Пример: <p>
		<em>Курсив внутри абзаца</em>
		</p>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Атрибуты — это свойства тега. С помощью них мы задаём параметры тега

	Пример: тег <a> - ссылка. Для задания адреса, куда будет вести эта ссылка, нам понадобится атрибут href. Вот так будет выглядеть ссылка на страницу ITC 	Вконтакте:
		  <a href="https://vk.com/itc.digital">ITC Вконтакте</a>

Атрибут указывается внутри тега, значение атрибута указывается внутри кавычек. Атрибуты отделяются друг от друга пробелами. 

	Пример: ссылка на страницу ITC, которая откроется в новой вкладке:

		<a href="https://vk.com/itc.digital" target="_blank">ITC Вконтакте</a>

У атрибута может не быть значения, тогда наличие атрибута включает какой-то параметр, а отсутствие - отключает. 

	Пример: атрибут disabled. Если кнопке <button> задать атрибут disabled, она станет серой и на неё невозможно будет нажать

		<button disabled>Нельзя нажимать</button>
		
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Особенности интерпретации HTML

- перенос строки только через тег

  HTML воспринимает перенос строки как пробел. Это нужно потому, что редакторы кода не переносят﻿ строки, которые не помещаются в экран - так удобнее писать код. 
  Поэтому чтобы длинный текст влезал в экран, в коде ставятся переносы строки, которые не нужны, когда страница показывается в браузере

- несколько пробелов, идущих подряд, считаются за один

  Это происходит по той же причине, что и с переносом строки. Так просто удобнее форматировать код в редакторе. 
  Из-за того, что теги вкладываются друг в друга, для удобного восприятия кода вложенность показывают отступами - пробелами
  
- произвольный регистр

  <br> даст такой же результат, что и <BR>, и <Br>, и <bR>. Несмотря на это, писать разметку лучше в нижнем регистре - это негласное правило
  
- перенос строки в теге

  При определении тега и его атрибутов можно переносить строку. Это полезно для длинных определений
  
  Пример: <img
		  src="http://example.com/cat.jpg"
          title="Мурка"
          alt="Рыжая кошка валяется в снегу"
          width="640"
          height="480"
		  >

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Структура HTML документа - скелет, на основе которого строится вся страница:	<!DOCTYPE html>
																				<html>
																				  <head>
																			       <meta charset="utf-8">
																			       <title>Страница</title>
																				  </head>
																				  <body>
																				    <h1>...</h1>
																			        <p>...</p>
																				  </body>
																				</html>
																				
<!DOCTYPE>

Первым тегом в любом HTML документе должен идти тег <!DOCTYPE>. Он говорит браузеру, по какому стандарту написана страница. 
На рассвете веба HTML существовал в разных несовместимых версиях, поэтому для их одновременной поддержки нужно было указывать версию явно. 
Сейчас все пришли к одному стандарту - HTML5. Поэтому для всех сайтов, которые создаются сегодня, нужно указывать <!DOCTYPE html> - так обозначается HTML5

<html>

Вторым тегом идет <html> - контейнер, который содержит два тега - <head> и <body>. HTML-страница должна заканчиваться закрытым тегом </html>

<head>

В теге <head> хранится информация о странице. Здесь указывают кодировку <meta charset="...">, имя страницы <title>...</title>, 
специальную информацию для поисковиков, а ещё тут подключаются стилевые файлы и скрипты. 
Тег <head> не отображается. Его цель — сказать браузеру информацию о странице

<body>

В теге <body> размещается весь контент страницы, который пользователь увидит в браузере

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Элементы - то, что создаётся тегами. Можно сказать, что теги это текстовое представление элементов

Элементы бывают двух видов:

1) Блочные элементы - составляют структуру страницы

  Особенности:

- блоки располагаются друг под другом по вертикали
- запрещено вставлять блочный элемент внутрь строчного
- занимают всё допустимое пространство по ширине
- высота вычисляется автоматически, исходя из содержимого

  Примеры:

- абзацы <р>
- списки: маркированные (с маркером) <ul> и нумерованные (с числами) <ol>
- заголовки: от первого уровня <h1> до шестого уровня <h6>
- статьи <article>
- разделы <section>
- длинные цитаты <blockquote>
- блоки общего назначения  <div>

2) Строчные элементы - используются для форматирования текстовых фрагментов. Обычно содержат одно или несколько слов

  Особенности:

- элементы, идущие подряд, располагаются на одной строке и переносятся на другую при необходимости
- внутрь допустимо вставлять текст или другие строчные элементы, помещать блочные элементы - запрещено

  Примеры:

- ссылки <a>
- выделенные слова <em>
- важные слова <strong>
- короткие цитаты <q>
- аббревиатуры <abbr>

Блочные элементы занимают всё доступное пространство по ширине
Строчные элементы ведут себя как текст - выстраиваются в ряд по горизонтали и переносятся на следующую строчку, если не хватает места

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

В HTML существует три вида списков:

1) Маркированный - список из неупорядоченных элементов

   Состоит из двух тегов:	<ul> (unordered list) - тег начала и конца списка
							<li> (list item) - пункт списка

   Пример:	Список ингредиентов:
		    <ul>
			  <li>Картошка</li>
		      <li>Морковка</li>
		      <li>Свекла</li>
		    </ul>
		   
2) Нумерованный - упорядоченный список, каждый пункт имеет свой номер

   Состоит из двух тегов:	<ol> (ordered list) - тег начала и конца списка
							<li> (list item) - пункт списка

   Пример:	Инструкция по приготовлению:
			<ol>
			  <li>Довести воду до кипения</li>
			  <li>Засыпать ингредиенты</li>
			  <li>Варить 10 минут</li>
			</ol>
			
3) Список определений - используются для создания списка терминов и их определений. В общем случае, каждый пункт — это пара "имя/значение"

   Состоит из трёх тегов:	<dl> (description list) - тег начала и конца списка
							<dt> (term) - термин
							<dd> (description) - определение
   Пример:	<dl>
			  <dt>Гаспачо</dt><dd>лёгкий холодный суп из перетёртых в пюре свежих овощей</dd>
			  <dt>Том-ям</dt><dd>кисло-острый суп на основе куриного бульона с креветками, курицей, рыбой или другими морепродуктами</dd>
			  <dt>Борщ</dt><dd>разновидность супа на основе свёклы, которая придаёт борщу характерный красный цвет</dd>
			</dl>
			
Вложенные списки

Списки можно вкладывать друг в друга. Для этого в элемент списка вставляется ещё один список.
Можно вкладывать списки любого вида друг в друга в любой последовательности

Пример:

<ul>
  <li>Омлет
    <ul>
      <li>Молоко</li>
      <li>Яйца</li>
    </ul>
  </li>
  <li>Блинчики
    <ul>
      <li>Молоко</li>
      <li>Яйца</li>
      <li>Мука</li>
      <li>Сахар</li>
      <li>Соль</li>
      <li>Разрыхлитель</li>
    </ul>
  </li>
  <li>Торт</li>
  <li>Пирог</li>
</ul>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Изображения

Для добавления изображения используется тег <img>. Это одинарный тег

Основные атрибуты:	src - ссылка на картинку﻿
					title - текст, который отображается при наведении мыши на картинку
					alt - текст, который отображается вместо картинки, если она не загрузилась
					width - ширина картинки в пикселях
					height - высота картинки в пикселях

Пример:	 <img
		   src="http://example.com/cat.jpg"
		   title="Мурка"
		   alt="Рыжая кошка валяется в снегу"
		   width="640"
		   height="480"
		 >
		 
Семантичные изображения с подписью в HTML 5

В HTML 5 появились теги для оформления объектов ﻿с подписями﻿ - figure и figcaption. Если картинке нужна подпись - можно воспользоваться ими

  Пример:  <figure>
			 <img src="https://www.google.ru/images/branding/googlelogo/2x/googlelogo_color_120x44dp.png﻿">
			 <figcaption>
			   Лого гугла от ﻿2015 года
			 </figcaption>
﻿		   </figure>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Ссылки и адреса

Для создания ссылки необходимо использовать тег <a>. Атрибут href указывает адрес, по которому будет совершён переход: <a href="https://google.com/">Google</a>

Адреса бывают двух видов:

1) Абсолютные адреса - абсолютный адрес, записанный в полной форме

   Пример:	https://google.com/doodles

			https - так называемая «схема», обычно это название протокола. HTTPS - защищённая версия HTTP
			google.com - доменное имя сайта
			/doodles - путь (директория) внутри сайта
   
   Пример:	file:///C:/Users/admin/Desktop/Новая%20папка/image.jpg
   
			file - схема URI, предназначенная для того, чтобы адресовать файлы на локальном компьютере или в локальной сети
			/C:/Users/admin/Desktop/Новая%20папка/image.jpg - путь до файла. %20 - код пробела в URI-кодировании

2) Относительные адреса - сокращённый адрес. В таком адресе начальная часть опущена и браузер использует текущий адрес для определения полного адреса 

   Пример:	//google.com - ссылка на домен в текущем протоколе: если мы находимся по адресу, который начинается с http, то ссылка будет вести на http://google.com
			/sheets - ссылка на путь внутри текущего домена: если мы находимся на http://google.com, то ссылка будет вести на http://google.com/sheets, а если на http://facebook.com, то на http://facebook.com/sheets
			page2 - ссылка на путь внутри текущей директории: если мы находимся на http://site.com/routes/page1, то попадём на http://site.com/routes/page2
			
   Пример:	Файловая система:	Новая папка
								├───img
								│   ├───kisa.jpg
								│   └───kot.png
								├───index.html
								└───style.css
								
			Код в index.html:	...
								<link rel="stylesheet" href="style.css">
								...
								<img src="img/kisa.jpg">
								<img src="img/kot.png">
								
								
   Задание: Замени абсолютные ссылки в HTML-коде на относительные: link ссылается на index.css по относительной ссылке
																   link ссылается на normalize.css по относительной ссылке
																   img получает картинку по относительному пути

			Структура файловой системы:

			C:.
			├───Users
			│   └───admin
			│       └───Desktop
			│           └───Мой сайт
			│               ├───index.html
			│               ├───index.css
			│               ├───css
			│               │   └───normalize.css
			│               └───img
			│                   └───picture.jpg
			...
			
   Решение: <!-- index.html -->
			<!DOCTYPE html>
			<html lang="ru">
			<head>
				<title>Мой сайт!!1</title>
				<meta charset="UTF-8">
				<link href="index.css" rel="stylesheet">
				<link href="css/normalize.css" rel="stylesheet">
			</head>
			<body>
				<h1>Мама, я в интернете!</h1>
				<img src="img/picture.jpg" title="Ето я">
			</body>
			</html>
			
Якоря

Ссылки могут ссылаться не только на страницу, но ещё и на конкретное место на странице. Такие ссылки называются якорными, а места, на которые они ссылаются - якорями

Якорному элементу нужно прописать атрибут id c именем якоря

   Пример:	<h1 id="anchor">Якорь</h1>

Теперь, чтобы сослаться на этот якорь, нужно использовать вот такую ссылку:	<a href="#anchor">Перейти к якорю</a>

При нажатии на ссылку произойдёт переход к нужному месту страницы, а в адресной строке к адресу страницы добавится адрес якоря #anchor

Якоря могут использоваться как в относительных ссылках, как в примере выше, так и в абсолютных

   Задание: Создай ссылку, которая:	ссылается на https://google.com
									будет открываться в новой вкладке
									
   Решение:	<a href="https://google.com" target="_blank">Google</a>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Таблицы

Таблицы в HTML создаются при помощи тега <table>

Внутри него размещают строки таблицы <tr> (table row)

Внутри строк помещают ячейки строки <td> (table data)

Тегом <th> (table header) размечаются заголовочные ячейки. Он отличается от <td> тем, что его содержимое будет выделено полужирным и выровнено по центру

   Пример таблицы:	<table>
				      <tr>
					    <th>Имя</th>
					    <th>Возраст</th> 
					    <th>Суперспособность</th>
				      </tr>
					  <tr>
						<td>Логан</td>
						<td>186</td> 
						<td>Повышенная способность к регенерации</td>
					  </tr>
					  <tr>
						<td>Профессор икс</td>
						<td>94</td>
						<td>Чтение мыслей, вызов иллюзий, временного паралича, способность останавливать время</td> 
					  </tr>
					</table>

По умолчанию границы таблиц не отображаются. Чтобы включить отображение границ, нужно использовать атрибут border, но атрибут border устарел и его применение в HTML5 не приветствуется 
Данный атрибут заменяет свойство border в CSS

   Пример:	<table border="1"> ... </table>
   
   
thead, tbody, tfoot, caption

Существует возможность группировать строки таблицы тегами <thead>, <tfoot>, <tbody>. Они не являются обязательными, но их рекомендуется использовать
Они дают частям таблицы семантический смысл

<thead> - для заголовка
<tbody> - основной контент таблицы
<tfoot> - нижний колонтитул таблицы

<tfoot> в коде можно расположить перед <tbody> или после него, но браузеры всегда выводят его в конце таблицы
<thead> и <tfoot> можно использовать только по одному разу в одной таблице, а количество <tbody> может быть любым
С помощью нескольких <tbody> можно разделить контент таблицы на смысловые части

Например, в таблице могут быть представлены данные за несколько лет, и каждый год будет вынесен в отдельный <tbody>
Название таблицы можно разместить в теге <caption>. Этот тег располагают внутри тега <table> в самом начале, перед тегами <thead>, <tfoot>, <tbody>
		
   Пример:	<table border="1">
			 <caption>Сотрудники отдела поддержки</caption>
			 <thead>
			   <tr>
				 <th>Имя</th>
				 <th>Должность</th>
			   </tr>
			 </thead>
			 <tbody>
			   <tr>
				 <td>Петя</td>
				 <td>Менеджер</td>
			   </tr>
			   <tr>
				 <td>Маша</td>
				 <td>Разработчик</td>
			   </tr>
			 </tbody>
			   <tfoot>
				 <tr>
				  <td>Вася</td>
				  <td>Девопс</td>
				</tr>
			   </tfoot>
		   </table>


Объединение столбцов

Если количество столбцов в одной строке меньше, чем количество столбцов в другой строке таблицы, то в строке с меньшим количеством ячеек образуется пустое пространство

   Пример:	<table border="1">
			  <tr>
				<td>Первая ячейка</td>
				<td>Вторая ячейка</td>
				<td>Третья ячейка</td>
			  </tr>
			  <tr>
				<td>Единственная ячейка</td>
			  </tr>
			</table>

Если ячейка не занимает свободное пространство, нужно растянуть её вправо с помощью атрибута colspan, и значением указать количество столбцов, которое в сумме будет занимать ячейка

   Пример:	<table border="1">
			  <tr>
				<td>Первая ячейка</td>
				<td>Вторая ячейка</td>
				<td>Третья ячейка</td>
			  </tr>
			  <tr>
				<td colspan="3">Единственная ячейка</td>
			  </tr>
			</table>


Объединение строк

Для объединения строк по аналогии со столбцами используется атрибут rowspan. Только в данном случае, ячейка растягивается вниз на указанное количество строк

   Пример:	<table border="1">
		      <tr>
			    <td rowspan="2">Левая ячейка</td>
				<td>Верхняя ячейка</td>
			  </tr>
			  <tr>
				<td>Нижняя ячейка</td>
			  </tr>
			</table>

Объединение строк и столбцов можно сочетать

Пример:	<table border="1">
		  <tr>
			<td rowspan="2">Левая ячейка</td>
			<td>Средняя ячейка</td>
			<td>Правая ячейка</td>
		  </tr>
		  <tr>
			<td colspan="2">Нижняя ячейка</td>
		  </tr>
		</table>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Формы

Формы используются для сбора информации, которую пользователь вводит в специально отведённые поля этой формы
Когда он введёт свои данные и нажмет кнопку «Отправить», все эти данные будут отправлены на сервер
Затем они будут обработаны и сервер отправит ответ пользователю
Существует два основных метода отправки данных: GET и POST

GET

Когда ты вводишь в адресной строке браузера какой-либо адрес и переходишь по нему, ты отправляешь серверу запрос, называемый GET
В таком запросе данные могут отсутствовать, как здесь: https://www.google.ru/
А вот запрос https://www.google.ru/search?q=itс+stepik содержит в себе переменную q, которая имеет значение itc stepik
В данном случае запрос отправляется на адрес https://www.google.ru/search,  а данные из полей и их названия идут после ? через знак &
Предварительно данные кодируются в URL код, чтобы сервер не перепутал служебные символы (вроде /, или ﻿&) с частью запроса

POST

Методом POST так же можно отправлять данные в URL. Но, в отличие от GET, он может иметь тело, которое может содержать данные, которые уйдут на сервер
Этот метод обычно используется для отправки форм и загрузки файлов

Какой метод использовать GET или POST, чем отличаются методы:

Страница, созданная методом GET, может быть открыта повторно множество раз. Такая страница может быть кэширована браузерами, проиндексирована поисковыми системами и добавлена в закладки пользователем
Из этого следует, что метод GET следует использовать для получения данных от сервера и не желательно в запросах, предполагающих внесений изменений в ресурс
Например, можно использовать метод GET в HTML форме фильтра товаров: когда нужно, исходя из данных введенных пользователем, переправить его на страницу с отфильтрованными товарами, соответствующими его выбору
Запрос, выполненный методом POST, напротив следует использовать в случаях, когда нужно вносить изменение в ресурс (выполнить авторизацию, отправить форму оформления заказа, форму обратной связи, форму онлайн заявки)
Повторный переход по конечной ссылке не вызовет повторную обработку запроса, так как не будет содержать переданных ранее параметров
Метод POST имеет большую степень защиты данных, чем GET: параметры запроса не видны пользователю без использования специального ПО, что дает методу преимущество при пересылке конфиденциальных данных, например в формах авторизации
HTTP метод POST поддерживает тип кодирования данных multipart/form-data, что позволяет передавать файлы
Также следует заметить, что методы можно комбинировать, то есть, при необходимости вы можете отправить POST запрос на URL, имеющий GET параметры


Создание формы

Элемент формы создаётся парным тегом <form>. Внутри размещаются сами поля, причем те, что расположены за пределами элемента, отправлены не будут
При необходимости в элементе формы можно использовать стороннюю разметку. Тип отображения по умолчанию block (блочный элемент)
Данный тег имеет два обязательных атрибута: action и method

В атрибуте action указывается ссылка на обработчик формы. Обработчиком формы является PHP файл (или файл, написанный на других ЯП), который будет обрабатывать данные этой формы

Атрибут method предназначен для указания метода отправки данных на сервер (GET или POST)


<input>

Поле задается одинарным тегом <input>. Данный тег стилизуется браузерами по-разному
Тип отображения по умолчанию inline (встроенный элемент), поэтому все поля отображаются в одной строке. Эта проблема решается подключением стилей


Типы полей форм

От пользователя нам могут понадобиться самые разные данные. Для удобства их сбора появились типы полей форм, они задаются через атрибут type

   Основные типы полей форм:   1) Текстовое поле. В атрибуте пишем text
								  
								  <input type="text">
								  
							   2) Ввод пароля. Указывается значение password

								  <input type="password">
								  
							   3) Флаги (чекбоксы). Они используются для выбора нескольких вариантов ответа и обозначаются в атрибуте как checkbox
								  Подпись к галочке нужно писать отдельно
								  
								  <input type="checkbox">
								  
							   4) Радио-кнопки. Это выбор одного из нескольких вариантов. Для создания в атрибуте прописываем radio
							      Переключатели между собой нужно связывать: пишем атрибут name с одинаковыми значениями
							      Также необходим атрибут value
								  
								  <input type="radio" name="gender" value="male" checked> Мужской<br>
								  <input type="radio" name="gender" value="female"> Женский<br>
								  <input type="radio" name="gender" value="other"> Другой
								  
   Эти типы создают кнопки:    1) Загрузка файлов. При значении атрибута file появляется кнопка загрузки
   
							      <input type="file">
								  
							   2) Сброс всех значений. Для создания такой кнопки пишем reset
								  Чтобы все сработало, кнопка должна находиться внутри формы, в которой нужно сбросить значения
								  
								  <input type="reset">
								  
							   3) Отправка. Любая форма бессмысленна, если не отправляется на сервер. Значение для такой кнопки: submit
							   
								  <input type="submit">
								  
							   4) Просто кнопка. Чтобы создать кнопку без определенного действия указываем button
							   
								  <button>Нажми на меня</button>
								
							   5) Раскрывающийся список. Это тег <select>. У него есть несколько атрибутов: name, size, multiple
							      Атрибут name работает как у переключателей
								  Size отвечает за то, сколько строк списка будет одновременно отображено. В качестве значения туда пишется целое положительное число
								  Атрибут multiple отвечает за то, можно ли выбрать сразу несколько вариантов из списка (как checkbox); это атрибут без значения
								  Каждый элемент списка выделяется в тег <option>
								  Так же, как и с <input type="checkbox"> и <input type="radio"> нужно указывать атрибут value со значением, которое будет отправлено на сервер
					
					
Новые типы полей

С появлением стандарта HTML5 добавились и новые типы полей форм. В первую очередь они стали гораздо удобнее для пользователей

- ввод E-Mail, type="email". Текстовое поле, у которого на клавиатуре мобильных устройств появляется символ @
- номер телефона, type="tel". На мобильных устройствах открывается клавиатура с числами
- ввод ссылки, type="url"
- числовое поле, type="number". Помимо клавиатуры с цифрами появляется возможность переключать значения поля. Атрибуты min и max определяют нижнее и верхнее возможное значение, step - шаг изменения, a value - начальное значение
- числовой ползунок, type="range". Появляются уже указанные атрибуты min, max, step и ﻿value
- поиск, type="search". Google Chrome добавляет крестик для очистки введенной строки. На мобильных устройствах появляется кнопка поиска


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


CSS
